install_dedicated_software () {
    ${default_shell} -c "${sofin_bin} i Openvpn Unbound Rust"
}


setup_watches () {
    note "Configure crontab for basic service supervision…"
    touch \
        "/etc/cron.d/dns-watch" \
        "/etc/cron.d/vpn-watch" \
        "/etc/cron.d/nginx-watch"

    lineinfile \
        src="/etc/cron.d/dns-watch" \
        line="'* * * * * root igni dns watch'"

    lineinfile \
        src="/etc/cron.d/vpn-watch" \
        line="'* * * * * root igni vpn watch'"

    lineinfile \
        src="/etc/cron.d/proxy-watch" \
        line="'* * * * * root igni proxy watch'"
}


setup_vpn_nat () {
    note "Install PF-NAT for network: $(distn "${vpn_network:-${default_network}}")"
    template \
        src="firewall/pf.conf" \
        dest="/etc/pf.conf" \
        mode="0644" \
        vpn_network="${vpn_network:-${default_network}}" \
        default_network_device="${default_network_device}" \
        default_bridge_device="${default_bridge_device}" \
        ip="${ip}"
}



install_common_igniter () {
    note "Install Service igniters…"
    template \
        src="igniters/common.igni" \
        dest="${igniters_dir}/common.igni" \
        mode="644"
}


install_openvpn_igniters () {
    template \
        src="igniters/openvpn.igni" \
        dest="${igniters_dir}/vpn.igni" \
        mode="755" \
        openvpn_softwaredir="${openvpn_softwaredir}" \
        openvpn_servicedir="${openvpn_servicedir}" \
        default_vpn_device="${default_vpn_device}" \
        default_bridge_device="${default_bridge_device}" \
        default_vpn_router="${default_vpn_router}"
}


install_unbound_igniters () {
    template \
        src="igniters/unbound.igni" \
        dest="${igniters_dir}/dns.igni" \
        mode="755" \
        unbound_softwaredir="${unbound_softwaredir}" \
        unbound_servicedir="${unbound_servicedir}" \
        default_network="${default_network}"
}


install_nginx_igniters () {
    template \
        src="igniters/nginx.igni" \
        dest="${igniters_dir}/proxy.igni" \
        mode="755" \
        nginx_softwaredir="${nginx_softwaredir}" \
        nginx_servicedir="${nginx_servicedir}"
}


setup_openvpn () {
    note "Install OpenVPN configuration"
    template \
        src="vpn/openvpn.conf" \
        dest="${openvpn_servicedir}/service.conf" \
        mode="0644" \
        client="${REMOTE}" \
        remote_vpn_server="${remote_vpn_server}" \
        openvpn_servicedir="${openvpn_servicedir}"

    note "Install OpenVPN server side certificates for client: ${REMOTE}"
    for _file in "ca.crt" "${REMOTE}.key" "${REMOTE}.crt"; do
        template \
            src="vpn/${_file}" \
            dest="${openvpn_servicedir}/${_file}" \
            mode="600"
    done
}


setup_unbound () {
    note "Configure Unbound"
    template \
        src="dns/unbound.conf" \
        dest="${unbound_servicedir}/service.conf" \
        mode="0644" \
        default_subnet="${default_subnet}" \
        unbound_servicedir="${unbound_servicedir}" \
        default_jails_domain="${default_jails_domain}" \
        default_network="${default_network}" \
        default_dns_dir="${shared_dir}/DNS"
}


setup_nginx_proxy () {
    note "Install Nginx-proxy configuration"
    template \
        src="web/nginx.conf" \
        dest="${nginx_servicedir}/service.conf" \
        mode="0644" \
        nginx_servicedir="${unbound_servicedir}" \
        geoip_sharedir="${geoip_sharedir}"
}


# NOTE: function unused for now:
launch_core_services () {
    note "Start OpenVPN server"
    igni "vpn" restart

    note "Start DNS server"
    igni "dns" restart

    note "Start Web proxy server: Nginx"
    igni "proxy" restart
}


setup_dedicated_system_config () {
    note "Configure $(distn "port-ACLs") (by default the $(distn "worker") user can bind ports $(distn "<1024"))"
    lineinfile \
        src="/etc/sysctl.conf" \
        line="security.mac.portacl.rules=gid:0:tcp:80,gid:0:tcp:443"

    # wipe out any old arc_min/ arc_max entries from sysctl.conf:
    ${SED_BIN} -i '' -e \
        's|^vfs.zfs.arc_min.*$||; s|^vfs.zfs.arc_max.*$||' \
        "/etc/sysctl.conf"
    note "Allocate min/max of: $(distn "${default_arc_size_min}")/$(distn "${default_arc_size_max}") bytes for $(distn "ZFS-ARC") read-cache."
    lineinfile \
        src="/etc/sysctl.conf" \
        line="vfs.zfs.arc_min=${default_arc_size_min}"
    lineinfile \
        src="/etc/sysctl.conf" \
        line="vfs.zfs.arc_max=${default_arc_size_max}"

    note "Enable $(distn "IPv4") packet forwarding feature"
    ${SED_BIN} -i '' -e \
        's|^net.inet.ip.forwarding.*$|net.inet.ip.forwarding = 1|' \
        "/etc/sysctl.conf"

    # NOTE: maybe one day we'll need ipv6?
    # note "Enabling IP forwarding feature for IPv6"
    # lineinfile \
    #     src="/etc/sysctl.conf" \
    #     line="'net.inet6.ip6.forwarding=1'"
    # lineinfile \
    #     src="/etc/rc.conf.local" \
    #     line="'ipv6_defaultrouter=${default_ipv6_router}'"
    # lineinfile \
    #     src="/etc/rc.conf.local" \
    #     line="'ipv6_gateway_enable=\"YES\"'"
    # lineinfile \
    #     src="/etc/rc.conf.local" \
    #     line="'rtadvd_enable=\"YES\"'"
    # lineinfile \
    #     src="/etc/rc.conf.local" \
    #     line="'rtadvd_interfaces=\"${default_network_device}\"'"

    note "Configure router address: $(distn "${default_network}.1") on device: $(distn "${default_bridge_device}")"
    lineinfile \
        src="/etc/rc.conf.local" \
        line="'cloned_interfaces=\"${default_bridge_device}\"'"

    lineinfile \
        src="/etc/rc.conf.local" \
        line="'ifconfig_bridge0_aliases=\"inet ${default_network}.1/16\"'"
}


generate_and_fill_pools () {
    # NOTE:
    #       /Shared/NetIDs/  ->  1000 … 9999
    #       /Shared/IPs/     ->  ${default_network}.2 … ${default_network}.254
    #
    note "Generate file-pools: $(distn "/Shared/IPs") and $(distn "/Shared/NetIDs")"
    for _pool_idx in $(${SEQ_BIN} 1000 9999 2>/dev/null); do
        ${TOUCH_BIN} "/Shared/NetIDs/id-${_pool_idx}"
    done
    for _pool_idx in $(${SEQ_BIN} 2 254 2>/dev/null); do
        ${TOUCH_BIN} "/Shared/IPs/ip-${default_network}.${_pool_idx}"
    done
}


install_jail_custody_watcher () {
    note "Install jail $(distn "Custody") script."
    template \
        src="igniters/custody" \
        dest="/usr/bin/custody" \
        mode="0755"

    note "Patch $(distn "/etc/rc.local") to launch $(distn "Custody") daemon on each system boot."
    ${SED_BIN} -i '' -e \
        's|return 0|echo Launch Custody daemon|' \
        "/etc/rc.local"
    printf "\n\n%s\n%s\n" \
        "nohup daemon -o /var/log/gvr-custody.log -R1 -P /var/run/custody.pid /usr/bin/custody" \
        "return 0" >> "/etc/rc.local"
}


install_jail_governor () {
    note "Install jail GoVeRnor: ($(distn "gvr"))"
    _timestamp="$(${DATE_BIN} +%s 2>/dev/null)"
    _tmpfile="/tmp/gvr-${_timestamp}.tmpl"
    _destfile="/usr/bin/gvr"
    ${FETCH_BIN} --no-verify-peer "${gvr_https_source}" -o "${_tmpfile}"
    ${SED_BIN} -i '' -e "s|__JAIL_ROUTER_NETWORK|${default_network}|" "${_tmpfile}"
    ${SED_BIN} -i '' -e "s|__JAIL_SHARED_DOMAIN|${default_jails_domain}|" "${_tmpfile}"
    ${MV_BIN} "${_tmpfile}" "${_destfile}"
    ${CHMOD_BIN} 750 "${_destfile}"
    unset _timestamp _destfile _tmpfile
}


install_igni_wrapper () {
    note "Install default Service igniter: $(distn "igni")"
    template \
        src="igniters/igni" \
        dest="/usr/bin/igni" \
        mode="0755" \
        vpn_network="${vpn_network:-${default_network}}" \
        default_network_device="${default_network_device}" \
        default_bridge_device="${default_bridge_device}" \
        ip="${ip}"
}
