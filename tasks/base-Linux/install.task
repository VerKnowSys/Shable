install_security_limits_configuration () {
    note "Ensure PAM limits are enabled"
    for _file in common-session common-session-noninteractive; do
        lineinfile \
            src="/etc/pam.d/${_file}" \
            line="'session required pam_limits.so'"
    done

    note "Install security limits.conf"
    _srcf="base/security/limits.conf"
    if [ ! -f "templates/${_srcf}" ]; then
        _srcf="base-${SYSTEM_NAME}/security/limits.conf"
        if [ -f "Shable/templates/${_srcf}" ]; then
            template \
                src="${_srcf}" \
                dest="/etc/security/limits.conf" \
                default_www_user="${default_www_user}"
        else
            note "Fallback to default OS security limits since no $(distn "limits.conf") provided."
        fi
    fi

    note "Install specific limits.d/*.conf"
    for _cnf in templates/base-${SYSTEM_NAME}/security/limits.d/*.conf templates/base/security/limits.d/*.conf; do
        _base="${_cnf##*/}" # basename
        _username="${_base%.conf}"
        ${ID_BIN} -u "${_username}" >/dev/null 2>&1
        if [ "0" = "${?}" ]; then
            note "Installing custom limits for custom user: $(distn "${_username}") found on host: $(distn "${REMOTE}")"
            template \
                src="${_cnf}" \
                dest="/etc/security/limits.d/${_username}.conf"
        fi
    done
}


create_cron_hourly () {
    template \
        src="base/cron.d/cron.periodic" \
        dest="/etc/cron.d/cron_hourly" \
        mode="640" \
        period="hourly" \
            minute="0" \
            hour="*" \
            day="*" \
            month="*" \
            dayofweek="*"
    template \
        src="base/cron.d/script_wrapper" \
        dest="/usr/local/bin/hourly" \
        mode="750" \
        period="hourly"
}


create_cron_daily () {
    template \
        src="base/cron.d/cron.periodic" \
        dest="/etc/cron.d/cron_daily" \
        mode="640" \
        period="daily" \
            minute="0" \
            hour="1" \
            day="*" \
            month="*" \
            dayofweek="*"
    template \
        src="base/cron.d/script_wrapper" \
        dest="/usr/local/bin/daily" \
        mode="750" \
        period="daily"
}


create_cron_weekly () {
    template \
        src="base/cron.d/cron.periodic" \
        dest="/etc/cron.d/cron_weekly" \
        mode="640" \
        period="weekly" \
            minute="0" \
            hour="0" \
            day="*" \
            month="*" \
            dayofweek="1"
    template \
        src="base/cron.d/script_wrapper" \
        dest="/usr/local/bin/weekly" \
        mode="750" \
        period="weekly"
}


create_cron_monthly () {
    template \
        src="base/cron.d/cron.periodic" \
        dest="/etc/cron.d/cron_monthly" \
        mode="640" \
        period="monthly" \
            minute="0" \
            hour="0" \
            day="1" \
            month="*" \
            dayofweek="*"
    template \
        src="base/cron.d/script_wrapper" \
        dest="/usr/local/bin/monthly" \
        mode="750" \
        period="monthly"
}


install_cron_hourly_tasks () {
    note "Install periodic cron hourly tasks"
    for _file in maintain_ooms hourly_tasks; do
        template \
            src="base-${SYSTEM_NAME}/cron/${_file}" \
            dest="/etc/cron.hourly/${_file}" \
            mode="0755"
    done

}


install_cron_daily_tasks () {
    note "Install periodic cron daily tasks"
    for _file in acme_tiny_download; do
        template \
            src="base-${SYSTEM_NAME}/cron/${_file}" \
            dest="/etc/cron.daily/${_file}" \
            mode="0755" \
            acme_source="${acme_remote_http_source}"
    done
}


switch_sshd_port () {
    note "Switching default SSH port to $(distn "${DEFAULT_SSH_PORT}")"
    ${SED_BIN} -i "s|#Port 22|Port ${DEFAULT_SSH_PORT}|" /etc/ssh/sshd_config
}


install_software () {
    note "Installing aptitude APT-TUI"
    apt install -y aptitude

    note "Add ppa:hadret/nginx apt resource that provides nginx+mmdb module."
    add-apt-repository --yes ppa:hadret/nginx

    note "Install 3rd party repository keys"
    add-apt-repository --yes ppa:ondrej/php || add-apt-repository --yes ppa:ondrej/php
    apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xcbcb082a1bb943db || apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xcbcb082a1bb943db
    # add-apt-repository --yes ppa:nginx/stable
    wget -q -O- http://nginx.org/keys/nginx_signing.key | apt-key add -

    # Maxmind - GeoIP
    add-apt-repository --yes ppa:maxmind/ppa

    note "Updating apt cache"
    apt update

    note "Install base software"
    DEBIAN_FRONTEND=noninteractive aptitude install -y --without-recommends \
        -o Dpkg::Options::="--force-confdef" \
        -o Dpkg::Options::="--force-confold" \
        uuid-runtime \
        curl \
        unzip \
        vim \
        nano \
        diffutils \
        irqbalance \
        git \
        iotop \
        htop \
        mc \
        openntpd \
        openssl \
        zip \
        nginx \
        libnginx-mod-http-geoip2 \
        geoipupdate \
        bind9-host \
        dnsutils

    note "Upgrading what's left to be upgraded on host"
    DEBIAN_FRONTEND=noninteractive aptitude --without-recommends -y \
        -o Dpkg::Options::="--force-confdef" \
        -o Dpkg::Options::="--force-confold" \
        upgrade
}

setup_root_ssh_key () {
    if [ ! -f "${HOME}/.ssh/id_ed25519" ]; then
        note "Creating new SSH-ed25519 pubkey for: $(distn "${USER}")"
        ssh-keygen -b 4096 -t ed25519 -N "" -f "${HOME}/.ssh/id_ed25519"
    else
        note "SSH ed25519 pubkey already exists for: $(distn "${USER}")"
    fi
}
