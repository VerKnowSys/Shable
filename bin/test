#!/bin/sh

. lib/shable

if [ ! -d "templates/test" ]; then
    cd ./Shable
fi

# test helpers:

_tmpfile="/tmp/$(${DATE_BIN} +%F-%s-%N 2>/dev/null).tmp"
terror () {
    debug "-----------------------------------------------------------------------------"
    ${CAT_BIN} "${_tmpfile}"
    debug "-----------------------------------------------------------------------------"
    error "${*}"
}

val_expect () {
    _value="${1}"
    _expected="${2}"
    if [ "${_expected}" != "${_value}" ]; then
        terror "Expected value: '$(diste "${_value}")' to be: '$(diste "${_expected}")'"
    fi
    debug "val_expect($(distd "Ok" "${ColorGreen}")): value='$(distd "${_value}")', expected='$(distd "${_expected}")'"
}

sha_expect () {
    _file="${1}"
    _expected="${2}"
    _input="$(${CAT_BIN} "${_file}" 2>/dev/null | ${OPENSSL_BIN} sha1 2>/dev/null | ${AWK_BIN} '{print $2;}' 2>/dev/null)"
    if [ -z "${_input}" ]; then
        # NOTE: libressl returns one thing, openssl other thing:
        _input="$(${CAT_BIN} "${_file}" 2>/dev/null | ${OPENSSL_BIN} sha1 2>/dev/null)"
    fi
    if [ "${_expected}" != "${_input}" ]; then
        if [ -n "${DEBUG}" ]; then
            ${CAT_BIN} "${_file}"
        fi
        terror "Expected file: '$(diste "${_file}")' to have sha1: '$(diste "${_expected}")' but it has: '$(diste "${_input}")'"
    fi
    debug "sha_expect($(distd "Ok" "${ColorGreen}")): file='$(distd "${_file}")', expected='$(distd "${_expected}")'"
}


# test functions:
template_test1 () {
    template \
        src="test/some_template.conf" \
        dest="/tmp/1D9D22B9-E753-4F8A-B8D6-1A0814F84BED.conf" \
        workers=4096 \
        additional="\"\$http_x_forwarded_for\"" \
        domain1="dom1.com" \
        domain2="dom2.pl" \
        domain3="*.dom3.se"
    sha_expect \
        "/tmp/1D9D22B9-E753-4F8A-B8D6-1A0814F84BED.conf" \
        "193e550be33f231328085b50626adf6979c4f8f9"
}


include_test0 () {
    include \
        "test/onlythis.task" only='always*#$%'

    val_expect \
        "$(only_test)" \
        'always*#$%!'

    is_empty "${test1value}" "$(diste "test1value") is set!"
    is_empty "${test2value}" "$(diste "test2value") is set!"

    include \
        "test/onlythis.task" only='of\ horse'

    val_expect \
        "$(only_test)" \
        'of horse!'
}


include_test1 () {
    include \
        "test" my_test_param_value=666

    val_expect \
        "${test2value}" \
        "aleniemakota"

    val_expect \
        "$(my_own_test_function_love)" \
        "yay 666 123"
}


include_pass_cache_vault_test0 () {
    _value="$(pass_cache "i/am/not/there")"
    is_empty "${_value}" "$(diste "_value") is set!"

    _value="$(pass_cache "")"
    is_empty "${_value}" "$(diste "_value") is set!"

    _value="$(pass_cache)"
    is_empty "${_value}" "$(diste "_value") is set!"
}


make_var_test0 () {
    is_empty "$(make_var_name "")" "SET: 109"
    is_empty "$(make_var_name)" "SET: 110"
    not_empty "$(make_var_name "%")" "EMPTY: 111"

    val_expect \
        "$(make_var_name "%")" \
        "_"

    val_expect \
        "$(make_var_name "a1.2.3-a-b-c/bb/cc /d")" \
        "a1_2_3_a_b_c_bb_cc__d"

    val_expect \
        "$(make_var_name "+=o;.:^-.%! ")" \
        "+_o___^_____"

    dupa_a1_2_3_a_b_c_bb_cc__d="123"
    val_expect \
        "$(get_var_value "dupa@a1.2!3#a*b%c/bb/cc /d")" \
        "123"

    abc123__="abc123"
    val_expect \
        "$(get_var_value "abc123()")" \
        "abc123"

    get_var_value "dupa_a1.2.3-a-b-c/bb/cc /d" > "${_tmpfile}"
    sha_expect \
        "${_tmpfile}" \
        "a8fdc205a9f19cc1c7507a60c4f01b13d11d7fd0" # sha1 of "123"

    is_empty "$(get_var_value "im/not/here")" "SET: 130"
}


make_cron_test0 () {
    case "${SYSTEM_NAME}" in
        Linux)
            _dest="/tmp/cron.daily"
            ;;
        FreeBSD|Darwin)
            _dest="/tmp/periodic/daily"
            ;;
    esac
    mkdir -p "${_dest}"
    cronjob \
        rootdir="/tmp" \
        type="periodic" \
        frequency="daily" \
        name="test0" \
        job="'echo 123'"

    sha_expect \
        "${_dest}/test0" \
        "325bbcceadec1bee22c09a693b9642181ccf576a"

    mkdir -p /tmp/cron.d
    cronjob \
        rootdir="/tmp" \
        type="cron" \
        name="test1" \
        minute="1" \
        hour="2" \
        mday="3" \
        month="4" \
        wday="5" \
        user="root" \
        job="'echo 321'"

    _a="$(${CAT_BIN} "/tmp/cron.d/test1" 2>/dev/null)"
    val_expect \
        "${_a}" \
        "1 2 3 4 5  root  echo 321"
}


self_test () {
    template_test1 && \
    include_test0 && \
    include_test1 && \
    include_pass_cache_vault_test0 && \
    make_var_test0 && \
    make_cron_test0

    { echo "2593645942376593476592374653294765" ; echo "eriujtuitjiuerjtiuertiyjerotiuyjeruiyj"; echo "abc 123 666"; echo "flamenco classico"; } > "${_tmpfile}"
    expected_sha1="248bece1356b0881aaf845703a09ee3375c260ff"
    expected2_sha1="8b2b8cf901b974c412e7a4ea90bd40222388f5af"
    sha_expect \
        "${_tmpfile}" \
        "${expected_sha1}"

    # pass
    lineinfile \
        src="${_tmpfile}" \
        line="'flamenco classico'"
    sha_expect \
        "${_tmpfile}" \
        "${expected_sha1}"

    # pass
    lineinfile \
        src="${_tmpfile}" \
        line="'flamenco classico'"
    sha_expect \
        "${_tmpfile}" \
        "${expected_sha1}"

    # no-op
    lineinfile \
        src="${_tmpfile}" \
        line="'abc 123 666'"
    sha_expect \
        "${_tmpfile}" \
        "${expected_sha1}"

    # add line to file cause pattern exists
    lineinfile \
        src="${_tmpfile}" \
        line="zuz" \
        pattern="2593645942376593476592374653294765"

    # no-op - line already present in file
    lineinfile \
        src="${_tmpfile}" \
        line="zuz" \
        pattern="2593645942376593476592374653294765"

    sha_expect \
        "${_tmpfile}" \
        "${expected2_sha1}"

    # no-op
    lineinfile \
        src="${_tmpfile}" \
        line="zuz" \
        pattern="zuz"

    # no-op
    lineinfile \
        src="${_tmpfile}" \
        line="zuz"

    sha_expect \
        "${_tmpfile}" \
        "${expected2_sha1}"

    # no-op
    lineinfile \
        src="${_tmpfile}" \
        line="zuz"

    sha_expect \
        "${_tmpfile}" \
        "${expected2_sha1}"

    # new line appended
    lineinfile \
        src="${_tmpfile}" \
        line="#anabela1337" \
        pattern="roti.*ruiyj"

    # no new line appended
    lineinfile \
        src="${_tmpfile}" \
        line="#anabela1337"

    # no-new line appended
    lineinfile \
        src="${_tmpfile}" \
        line="#anabela1337" \
        pattern="roti.*ruiyj"

    # add "escaped" line input test
    lineinfile \
        src="${_tmpfile}" \
        line="'define(\"DEBUG\", true);'"
    lineinfile \
        src="${_tmpfile}" \
        line="'define(\"DEBUG\", true);'"

    # add one more "escaped" line input test
    lineinfile \
        src="${_tmpfile}" \
        line="'\$dbg_conf[\"VMS_DEMO\"] = true;'"
    lineinfile \
        src="${_tmpfile}" \
        line="'\$dbg_conf[\"VMS_DEMO\"] = true;'"

    val_expect \
        "$(${GREP_BIN} -c "anabela1337" "${_tmpfile}" 2>/dev/null)" \
        "1"

    val_expect \
        "$(${GREP_BIN} -c "zuz" "${_tmpfile}" 2>/dev/null)" \
        "1"

    val_expect \
        "$(${GREP_BIN} -c 'define("DEBUG", true);' "${_tmpfile}" 2>/dev/null)" \
        "1"

    val_expect \
        "$(${GREP_BIN} -c '\"VMS_DEMO\"' "${_tmpfile}" 2>/dev/null)" \
        "1"

    _rem1="REM1993355"
    lineinfile \
        src="${_tmpfile}" \
        line="'10 0 * * * cd /var/www/vms/${_rem1}/ && run-one php src/${_rem1}/index.php --path=system/crontab/stock --client=${_rem1} > /dev/null 2>&1'"
    val_expect \
        "$(${GREP_BIN} -c 'REM1993355' "${_tmpfile}" 2>/dev/null)" \
        "1"

    lineinfile \
        src="${_tmpfile}" \
        line="'5 0 * * Sun /backups/backupDATA.sh >> /var/log/cronDATA.log 2>> /var/log/cronDATA.log'"
    val_expect \
        "$(${GREP_BIN} -c '/backups/backupDATA.sh' "${_tmpfile}" 2>/dev/null)" \
        "1"

    if [ -n "${DEBUG}" ]; then
        debug "Tmpfile contents:"
        ${CAT_BIN} "${_tmpfile}"
    fi
}


system_specific_test () {
    only_bits "64"
    only_as "${USER}"
    case "${SYSTEM_NAME}" in
        Linux)
            # val_expect \
            #     "$(lsb_release -c | ${AWK_BIN} '{print $2;}')" \
            #     "${release}"
            only_for "Linux"
            only_for "       Darwin              Linux           "
            only_for "Darwin Linux Linux"
            only_for "Minix FreeBSD Darwin NetBSD Linux FreeBSD"
            ;;

        FreeBSD)
            only_for "FreeBSD"
            only_for "       Darwin              FreeBSD           "
            only_for "Darwin FreeBSD Linux"
            only_for "Minix FreeBSD Darwin NetBSD Linux FreeBSD"
            ;;

        Darwin)
            only_for "Darwin"
            only_for "       Darwin              Darwin           "
            only_for "Darwin FreeBSD Linux"
            only_for "Minix FreeBSD Linux NetBSD Darwin FreeBSD"
            ;;

    esac
}


test_facts_write () {
    facts_write b0=5 c0=8 d0=123
    facts_write b1=5 c1=8 d1=123

    # bin/shable does this automatically before
    # invoking each reign task:
    . facts/cached/b0.facts
    . facts/cached/b1.facts
    . facts/cached/c0.facts
    . facts/cached/c1.facts
    . facts/cached/d0.facts
    . facts/cached/d1.facts

    val_expect "b${b0}" "b${b1}"
    val_expect "c${c0}" "c${c1}"
    val_expect "d${d0}" "d${d1}"

    # special cases
    facts_write bogus="'\$*@b0'"

    . facts/cached/bogus.facts

    val_expect "${bogus}" '$*@b0'
}


test_equals_in_value () {
    dupa_a1_2_3_a_b_c_bb_cc__d="somevalue="
    val_expect \
        "$(get_var_value "dupa@a1.2!3#a*b%c/bb/cc /d")" \
        "somevalue="

    validate some_var="abc=SOME"
    validate some_var2="abc=some=thing="
    validate some_var2="abc====some=other====thing="
}


# Invoke tests:
bin/shable inventory-test test-reign && \
validate_env && \
self_test && \
system_specific_test && \
test_inventory_reader && \
test_facts_write && \
test_equals_in_value && \
note "Everything as expected!"

if [ -d "templates/test" ]; then
    cd ..
fi
