#!/bin/sh

. lib/shable

_branch="${1:-master}"


reset_shable_core_module () {
    if [ -d "${PWD}/Shable" ]; then
        note "Reset any uncomitted changes in main $(distn "Shable") moduleâ€¦"

        cd ./Shable >/dev/null && \
            git reset --hard || return 1
        cd ..
    fi
    return 0
}


update_shable_core_repo () {
    git submodule update \
        --jobs 4 \
        --remote \
        --quiet \
        --recursive && \
        eval "$(${GREP_BIN} -F 'SHABLE_VERSION' 'lib/vars' 2>/dev/null | ${SED_BIN} -e 's|SHABLE_VERSION|SHBL_VRSN|' 2>/dev/null)" && \
        note "Shable was updated to version: $(distn "${SHBL_VRSN}")." && \
        return 0
    return 1
}


update_main_repo () {
    git pull \
        --jobs 4 \
        --quiet \
        --recurse-submodules && \
        note "Repository: $(distn "${PWD##*/}"). Current HEAD: $(distn "$(${CAT_BIN} ".git/ORIG_HEAD" 2>/dev/null)")." && \
        return 0
    return 1
}


complete_success () {
    echo
    exit 0
}


# main function:
main () {
    reset_shable_core_module && \
    update_main_repo && \
    update_shable_core_repo && \
    complete_success

    # or else - run failure handler that something went wrong:
    error "$(diste "bin/update") has failed!"
}


# run updater:
main
