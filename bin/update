#!/bin/sh

. lib/shable

_branch="${1:-master}"


reset_shable_core_module () {
    if [ -d "${PWD}/Shable" ]; then
        cd ./Shable >/dev/null && \
            git reset --hard >/dev/null \
                || failure "Couldn't reset submodule state!"
        cd ..
    fi
    return 0
}


update_shable_repos () {
    git pull \
        --quiet \
        --recurse-submodules && \
            note "$(distn "${PWD##*/}"): Current HEAD: $(distn "$(${CAT_BIN} ".git/ORIG_HEAD" 2>/dev/null)")" \
                || failure "Couldn't pull main repository!"

    if [ -f "${PWD}/.gitmodules" ]; then
        git submodule foreach \
            git pull \
                --jobs 4 \
                --quiet \
                "origin" "${_branch}" >/dev/null \
                    || failure "Couldn't pull submodule!"

        git submodule update \
            --jobs 4 \
            --remote \
            --quiet \
            --recursive && \
                eval "$(${GREP_BIN} -F 'SHABLE_VERSION' 'lib/vars' 2>/dev/null | ${SED_BIN} -e 's|SHABLE_VERSION|SHBL_VRSN|' 2>/dev/null)" && \
                note "$(distn "Shable") v$(distn "${SHBL_VRSN}"): Current HEAD: $(distn "$(${CAT_BIN} ".git/modules/Shable/ORIG_HEAD" 2>/dev/null)")" \
                    || failure "Couldn't update repositories!"
    fi
}


failure () {
    echo
    error "FAILURE: ${*}!"
}


success () {
    echo
    exit
}


# main function:
main () {
    reset_shable_core_module && \
    update_shable_repos && \
        success

    # or else - run failure handler that something went wrong:
    failure "$(diste "bin/update") has failed!"
}


# run updater:
main
