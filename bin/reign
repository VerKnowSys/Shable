#!/bin/sh

. lib/shable


_inventory="${1}"
_reign="${2}"
_remote="${3}"
_sshd_port="${4:-${DEFAULT_SSH_PORT}}"

if [ -z "${_inventory}" ]; then
    error "Inventory to read inputs from is required as 1st param!"
else
    if [ -z "${_reign}" ]; then
        error "Reign task name required as 2nd param!"
    else
        if [ -z "${_remote}" ]; then
            error "Client name is required as 3rd param!"
        else
            REMOTE="${_remote}"

            # Read base.facts - cause bin/reign can make use of base facts too
            if [ -f "${SHABLE_NAME}/facts/base.facts" ]; then
                debug "+ common base facts: $(distd "${SHABLE_NAME}/facts/base.facts")"
                . "${SHABLE_NAME}/facts/base.facts"
            fi
            if [ -f "facts/base.facts" ]; then
                debug "+ base facts: $(distd "facts/base.facts")"
                . "facts/base.facts"
            fi

            inventory_read "${_inventory}" "${REMOTE}"
            if [ -z "${REMOTE}" ]; then
                debug "No inventory values read for empty remote host!"
            fi

            # use default value of remote user:
            _remote_user="${default_remote_user}"

            # default remote user can be overriden with RUN_AS value:
            if [ -z "${RUN_AS}" ]; then
                debug "Running as default user: $(distd "${_remote_user}")"
            else
                debug "Running as user: $(distd "${RUN_AS}")"
                _remote_user="${RUN_AS}"
            fi
            _base_name="/tmp/shable_current_${_remote_user}"

            validate \
                _inventory="${_inventory}" \
                _remote_user="${_remote_user}" \
                default_remote_user="${default_remote_user}" \
                connection_timeout="${connection_timeout}" \
                connection_attempts="${connection_attempts}"

            commit_failure () {
                warn "Reign FAILED: $(distw "${_reign}") for host: $(distw "${REMOTE}"). Reason: ${*}"
                error "${*}"
            }

            sync_with_rsync () {
                for _attempt in 1 2 3; do
                    ${RSYNC_BIN} \
                        --timeout=2 \
                        --exclude=".git" \
                        --recursive \
                        --compress \
                        --archive \
                        --delete \
                        "./" \
                        "${_remote_user}@${REMOTE}:${_base_name}" 2>/dev/null
                    if [ "0" = "$?" ]; then
                        return 0
                    else
                        sleep "${DEFAULT_TIMEOUT_S}"
                    fi
                done
                return 1
            }

            _remote_system=$(${SSH_BIN} \
                -o "BatchMode=yes" \
                -o "ConnectTimeout=3" \
                -o "ConnectionAttempts=1" \
                -o "ServerAliveInterval=1" \
                "${_remote_user}@${REMOTE}" \
                "uname")
            note "Remote system: $(distn "${_remote_system}")"

            scp_rsync () {
                case "${_remote_system}" in
                    FreeBSD)
                        if [ -f "templates/base-FreeBSD/bin/rsync" ]; then
                            ${SCP_BIN} -P "${_sshd_port}" \
                                "templates/base-FreeBSD/bin/rsync" \
                                "${_remote_user}@${REMOTE}:/usr/bin/rsync"
                        elif [ -f "Shable/templates/base-FreeBSD/bin/rsync" ]; then
                            ${SCP_BIN} -P "${_sshd_port}" \
                                "Shable/templates/base-FreeBSD/bin/rsync" \
                                "${_remote_user}@${REMOTE}:/usr/bin/rsync"
                        fi
                        ;;

                    Linux)
                        # XXX: Debian specific base:
                        apt-get install -y rsync
                        ;;

                    *)
                        ;;
                esac
            }

            debug "Making sure Rsync is available on remote host"
            ${SSH_BIN} \
                -o "BatchMode=yes" \
                -o "ConnectTimeout=3" \
                -o "ConnectionAttempts=1" \
                -o "ServerAliveInterval=1" \
                "${_remote_user}@${REMOTE}" \
                "test -x ${RSYNC_BIN}" || scp_rsync

            debug "rSyncing ${SHABLE_NAME} as: $(distd "${_remote_user}") to: $(distd "${_base_name}")"
            sync_with_rsync || commit_failure "Failed to rsync to: $(distw "${_remote_user}@${REMOTE}:${_base_name}")"

            _job="cd ${_base_name}; /bin/sh -c \
' \
export REMOTE=${REMOTE} ARGUMENTS=\"${ARGUMENTS}\" DEBUG=${DEBUG} SKIP_ENV_VALIDATION=${SKIP_ENV_VALIDATION} \
&& bin/shable ${_inventory} ${_reign} \
'"

            invoke_ssh () {
                debug "Invoking remote job: $(distd "invoke_ssh('${_job}')")"
                for _attempt in 1 2 3; do
                    debug "Job attempt: $(distd "${_attempt}")"
                    ${SSH_BIN} -tt \
                        -o "BatchMode=yes" \
                        -o "ConnectTimeout=${connection_timeout}" \
                        -o "ConnectionAttempts=${connection_attempts}" \
                        -o "ServerAliveInterval=1" \
                        "${_remote_user}@${REMOTE}" \
                        "${_job}"

                    if [ "0" = "$?" ]; then
                        debug "Job successful"
                        return 0
                    else
                        debug "Job unsuccessful, attempt: $(distd "${_attempt}")"
                        sleep "${DEFAULT_TIMEOUT_S}"
                    fi
                done
                return 1
            }

            debug "Invoking ${SHABLE_NAME} on remote: $(distd "${REMOTE}")"
            invoke_ssh || commit_failure "Failed to invoke ssh connection to remote: $(diste "${REMOTE}")"

            note "Reign completed: $(distn "${_reign}")"
        fi
    fi
fi
