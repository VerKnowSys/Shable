#!/bin/sh

# load core:
. lib/core


#
# Includes facts and tasks based on group name or path to task
#
# If argument is a group name, group facts are loaded before loading tasks. All tasks of a group are loaded at once.
# If first argument is a partial path to a task, no facts are loaded.
#
include () {
    _partial_path="${1}"
    shift
    _args="${*}"
    eval "${_args}" >/dev/null 2>/dev/null

    #
    # Facts:
    #

    # seek for system speficic facts (override)
        if [ -f "${SHABLE_NAME}/facts/${SYSTEM_NAME}.facts" ]; then
            debug "+ OS common facts from: $(distd "${SHABLE_NAME}/facts/${SYSTEM_NAME}.facts") with args: '$(distd "${_args}")'"
            . "${SHABLE_NAME}/facts/${SYSTEM_NAME}.facts"
        fi
        if [ -f "facts/${SYSTEM_NAME}.facts" ]; then
            debug "+ OS specific facts from: $(distd "facts/${SYSTEM_NAME}.facts") with args: '$(distd "${_args}")'"
            . "facts/${SYSTEM_NAME}.facts"
        fi

    # load base facts from Shable "base stdlib"
        if [ -f "${SHABLE_NAME}/facts/base.facts" ]; then
            debug "+ all common facts from: $(distd "${SHABLE_NAME}/facts/base.facts") with args: '$(distd "${_args}")'"
            . "${SHABLE_NAME}/facts/base.facts"
        fi
        if [ -f "facts/base.facts" ]; then
            debug "+ all facts from: $(distd "facts/base.facts") with args: '$(distd "${_args}")'"
            . "facts/base.facts"
        fi

    # load specific facts
        if [ -f "${SHABLE_NAME}/facts/${_partial_path}.facts" ]; then
            debug "+ all common facts from: $(distd "${SHABLE_NAME}/facts/${_partial_path}.facts") with args: '$(distd "${_args}")'"
            . "${SHABLE_NAME}/facts/${_partial_path}.facts"
        fi
        if [ -f "facts/${_partial_path}.facts" ]; then
            debug "+ all facts from: $(distd "facts/${_partial_path}.facts") with args: '$(distd "${_args}")'"
            . "facts/${_partial_path}.facts"
        fi


    # Tasks:

    # seek for particular task file:
        if [ -f "${SHABLE_NAME}/tasks/${_partial_path}" ]; then
            debug "+ only common task from: $(distd "${SHABLE_NAME}/tasks/${_partial_path}") with args: '$(distd "${_args}")'"
            . "${SHABLE_NAME}/tasks/${_partial_path}"
            return
        fi
        if [ -f "tasks/${_partial_path}" ]; then
            debug "+ only task from: $(distd "tasks/${_partial_path}") with args: '$(distd "${_args}")'"
            . "tasks/${_partial_path}"
            return
        fi

    # load all tasks by task group name:
        if [ -d "${SHABLE_NAME}/tasks/${_partial_path}/" ]; then
            for _taskfile in ${SHABLE_NAME}/tasks/${_partial_path}/*; do
                debug "+ common tasks from: $(distd "${_taskfile}") with args: '$(distd "${_args}")'"
                . "${_taskfile}"
            done
        fi
        if [ -d "tasks/${_partial_path}/" ]; then
            for _taskfile in tasks/${_partial_path}/*; do
                debug "+ tasks from: $(distd "${_taskfile}") with args: '$(distd "${_args}")'"
                . "${_taskfile}"
            done
        fi

    unset _args _taskfile _partial_path
}


#
# Creates a file from given template
#
# src argument is a partial path to template file from some group.
# dest argument is destination file.
# any other arguments name=value are values of template element {{ name }}
#
template () {
    _args="${*}"
    eval "${_args}" >/dev/null 2>/dev/null

    if [ -z "${src}" ]; then
        error "Unspecified $(diste "src") for $(diste "template()")!"
    fi
    if [ -z "${dest}" ]; then
        error "Unspecified $(diste "dest") for $(diste "template()")!"
    fi

    _template_file="templates/${src}"
    if [ ! -f "${_template_file}" ]; then
        _template_file="${SHABLE_NAME}/${_template_file}"
        if [ ! -f "${_template_file}" ]; then
            error "Source template $(diste "src=${_template_file}") not found!"
        fi
    fi

    validate "${_args}"

    if [ -f "${dest}" ]; then
        _base="${dest##*/}-$(${DATE_BIN} +%F-%s 2>/dev/null)"
        debug "Destination file: $(distd "${dest}") already exists, moving old file to: $(distd "/tmp/${_base}")"
        ${MV_BIN} -f "${dest}" "/tmp/${_base}"
    fi

    if [ -z "${mode}" ]; then
        mode="0644"
    fi

    if [ -z "${owner}" ]; then
        owner="${USER:-root}"
    fi

    ${INSTALL_BIN} -v \
        -m "${mode}" \
        -o "${owner}" \
        "${_template_file}" \
        "${dest}"

    for _arg in ${_args}; do
        _key="$(echo "${_arg}" | ${SED_BIN} 's/=.*//' 2>/dev/null | ${SED_BIN} -e 's/[]\/$*.^[]/\\&/g' 2>/dev/null)"
        # escape &\ for sed-replace
        # and remove quoted (needed due to eval above which breaks if value contains &)
        _val="$(echo "${_arg}" | ${SED_BIN} -E 's/[^=]+=//' 2>/dev/null | \
            ${SED_BIN} -e 's/[\/&]/\\&/g' 2>/dev/null | \
            ${SED_BIN} -e "s/^'\(.*\)'$/\1/" 2>/dev/null)"
        case "${SYSTEM_NAME}" in
            Darwin|FreeBSD)
                ${SED_BIN} -i '' -e "s#{{ *${_key} *}}#${_val}#g;" "${dest}"
                ;;

            Linux)
                ${SED_BIN} -i "s#{{ *${_key} *}}#${_val}#g;" "${dest}"
                ;;
        esac
    done
    unset mode owner src dest _arg _args _key _val _base _template_file
}


#
# Validates that all arguments given with name=value format, are defined (not empty).
# Throws an error if any value is not defined
#
validate () {
    _validate_args="${*}"
    for _val_arg in ${_validate_args}; do
        _val_key="$(echo "${_val_arg}" | ${SED_BIN} 's/=.*//' 2>/dev/null)"
        _val_value="$(echo "${_val_arg}" | ${SED_BIN} 's/.*=//' 2>/dev/null)"
        if [ -z "${_val_value}" ]; then
            # for multiple instances of the "=" in value, let's just leave the first one and drop all others:
            _val_value="$(echo "${_val_arg}" | ${AWK_BIN} 'BEGIN { FS="=" } { if (NF > 1) {print $2 $3 $4 $5 $6 $7 $8 $9} }' 2>/dev/null)"
        fi

        debug "_val_arg: $(distd "${_val_arg}"), _val_key: $(distd "${_val_key}"), _val_value: $(distd "${_val_value}")"
        if [ -z "${_val_value}" ]; then
            error "validate($(diste "Fail" "${ColorRed}")): Expected $(diste "${_val_key}") to be defined! Task aborted!"
        else
            debug "validate($(distd "Ok" "${ColorGreen}")): $(distd "${_val_key}")=$(distd "${_val_value}")"
        fi
    done
    unset _validate_args _val_arg _val_key _val_value
}


#
# Helper to easily ensure given line is in file based on given line contents and/or pattern regexp
#
# Function performs plain-text checks for 'line'
# Function performs regex checks for 'pattern'.
#
# Args:
#   'src' - absolute path to file
#   'line' - line contents text that has to be present in given file
#   'pattern' - regexp pattern - considered as an additional match-conditional made on file contents
#
lineinfile () {
    eval "${*}" >/dev/null 2>&1
    if [ -z "${src}" ]; then
        error "No $(diste "src") file given!"
    fi
    if [ -z "${line}" ]; then
        error "No content $(diste "line") given!"
    fi
    write_line_if_not_already_present () {
        debug "lineinfile: $(distd "${src}"): line: $(distd "${line}")"
        ${GREP_BIN} -F "${line}" "${src}" >/dev/null 2>&1 || \
            printf "%s\n" "${line}" >> "${src}"
    }
    if [ -n "${pattern}" ] && [ "${line}" != "${pattern}" ]; then
        debug "lineinfile-pattern: $(distd "${pattern}") => $(distd "${src}"): line: $(distd "${line}")"
        ${GREP_BIN} -E "${pattern}" "${src}" >/dev/null 2>&1 && \
            write_line_if_not_already_present
    else
        write_line_if_not_already_present
    fi
    unset src pattern line
}


#
# Helper to easily generate cron / periodic tasks
#
# Args:
#   'name' - name of cron task file
#   'job' - command/absolute path to script to invoke as cron task/job
#   'type' - either "cron" or "periodic" (default: "periodic")
#
#   for "periodic" type specific args:
#       'frequency' - either "daily", "weekly" or "monthly" (default: "daily")
#
#   for "cron" type specific args:
#      'minute' - used to specify cron value (default: *)
#      'hour' - used to specify cron value (default: *)
#      'mday' - used to specify cron value (default: *)
#      'month' - used to specify cron value (default: *)
#      'wday' - used to specify cron value (default: *)
#      'user' - used to specify cron value (default: root)
#
#   'rootdir' - default: /etc (used only for testing)
#
cronjob () {
    _args="${*}"
    eval "${_args}" >/dev/null 2>/dev/null

    validate \
        _job="${job}" \
        _name="${name}"

    # defaults:
    rootdir="${rootdir:-/etc}"
    type="${type:-periodic}"
    frequency="${frequency:-daily}"

    case "${type}" in
        periodic)
            case "${SYSTEM_NAME}" in
                Linux)
                    _cron_job_dir="${rootdir}/cron.${frequency}"
                    ;;

                FreeBSD|Darwin)
                    _cron_job_dir="${rootdir}/periodic/${frequency}"
                    ;;
            esac

            _cron_job_file="${_cron_job_dir}/${name}"
            if [ ! -d "${_cron_job_dir}" ]; then
                error "No such periodic directory: $(diste "${_cron_job_dir}")"
            fi
            debug "Writing periodic: $(distd "${frequency}"), cronjob: $(distd "${name}"), file: $(distd "${_cron_job_file}")"

            printf "#!/bin/sh\n\n%s\n" "${job}" > "${_cron_job_file}"
            ${CHMOD_BIN} 755 "${_cron_job_file}"
            ;;

        cron)
            _cron_job_dir="${rootdir}/cron.d"
            _cron_job_file="${_cron_job_dir}/${name}"
            if [ ! -d "${_cron_job_dir}" ]; then
                error "No such periodic directory: $(diste "${_cron_job_dir}")"
            fi

            minute="${minute:-"*"}"
            hour="${hour:-"*"}"
            mday="${mday:-"*"}"
            month="${month:-"*"}"
            wday="${wday:-"*"}"
            user="${user:-root}"
            debug "Writing cron job: $(distd "${minute} ${hour} ${mday} ${month} ${wday} ${user} ${job}"), cronjob: $(distd "${name}"), file: $(distd "${_cron_job_file}")"
            printf "%s %s %s %s %s  %s  %s\n" "${minute}" "${hour}" "${mday}" "${month}" "${wday}" "${user}" "${job}" > "${_cron_job_file}"
            ${CHMOD_BIN} 644 "${_cron_job_file}"
            ;;

        *)
            error "Unknown cronjob type: $(diste "${type}")"
            ;;
    esac
    unset _args type _cron_job_file minute hour mday month wday user rootdir frequency
}



#
# System constraint helper.
#   Will iterate over given uname names and throw an error if reign task is invoked on unsupported platform(s).
#
# Args:
#   Systemname Othersystemname …
#
# Example:
#   Linux Darwin FreeBSD
#
only_for () {
    if [ -n "${*}" ]; then
        unset _found
        for _os_name_element in ${*}; do
            if [ "${SYSTEM_NAME}" = "${_os_name_element}" ]; then
                _found="YES"
                debug "Found system match: $(distd "${_os_name_element}")"
                break
            fi
        done
        if [ -z "${_found}" ]; then
            error "This reign task can only be invoked for: system($(diste "${*}"))"
        fi
        unset _found
        return 0
    else
        debug "No system names specified as params to: $(distd "only_for()")! -> Ignoring empty constraint!"
        return 0
    fi
}


#
# User constraint helper.
#   Will make sure that reign task is invoked as given POSIX username.
#
# Arg:
#   username
#
only_as () {
    if [ "${USER}" != "${1}" ]; then
        error "This reign task can only be invoked as: user($(diste "${1}"))!"
    fi
}


#
# Inventory helper, with groups support
#   Will read given inventory file and find values per given group and user
#
# Args:
#   1. inventory-file:group-name
#   2. host name
#
# Example, when inventory file has no groups:
#   inventory_read inventory host18
#
# Example, when inventory file has defined groups:
#   inventory_read inventory:third-party host18
#
inventory_read () {
    _inv_internal="${1}"

    # support for specifying group like on unixes, by username:groupname as inventory
    _inv_grp="${default_inventory_group}"
    echo "${_inv_internal}" | ${GREP_BIN} -F ":" >/dev/null 2>&1
    if [ "0" = "${?}" ]; then
        _inv_grp="$(echo "${_inv_internal}" | ${CUT_BIN} -d':' -f2 2>/dev/null)"
        _inv_internal="$(echo "${_inv_internal}" | ${CUT_BIN} -d':' -f1 2>/dev/null)"
    fi
    if [ ! -f "${_inv_internal}" ]; then
        _inv_internal="${SHABLE_NAME}/${_inv_internal}"
        if [ ! -f "${_inv_internal}" ]; then
            error "No inventory found: $(diste "${_inv_internal}")"
        fi
    fi

    _host="${2}"
    if [ -z "${_host}" ]; then
        debug "No host specified for inventory: '$(distd "${_inv_internal}:${_inv_grp}")'!"
        return 0
    fi
    debug "Loading inventory: $(distd "${_inv_internal}:${_inv_grp}"), for host: $(distd "${_host}")"

    # all lines of inventory file
    _inv_all_lines="$(${CAT_BIN} "${_inv_internal}" | ${WC_BIN} -l | ${SED_BIN} 's/ //g')"
    if [ "0" = "${_inv_all_lines}" ]; then
        warn "Empty inventory: $(distw "${_inv_internal}"). Nothing to load."
        return 0
    fi

    # read groups
    __gcount=0
    for _dynval in $(${GREP_BIN} -nE "\[.*\]" "${_inv_internal}" 2>/dev/null | ${SED_BIN} "s/^/__ln=/; s#:\[#;__grp=#; s#]##" 2>/dev/null); do # read groups
        eval "${_dynval}"
        __gcount=$(( ${__gcount} + 1 ))
        debug "inventory grp: $(distd "${__grp}"), start line: $(distd "${__ln}")"
        eval "__grp${__gcount}=${__grp}; __ln${__gcount}=${__ln}" # store values in dynamic variables
    done

    process_inventory_values () {
        # when running with inventory groups,  invoke loading inventory header file first, before loading first group:
        if [ "1" = "${_gnum}" ]; then
            _end=$(( ${_line_to_read_start} - 2 ))
            if [ "0" != "${_end}" ]; then
                debug "Inventory first lines to read: $(distd "${_end}")"
                for _lnum in $(${SEQ_BIN} "1" "${_end}" 2>/dev/null); do
                    _line="$(${SED_BIN} "${_lnum}q;d" "${_inv_internal}")" # print N-th line of file
                    if [ -n "${_line}" ]; then
                        eval "$(echo "${_line}" | ${CUT_BIN} -d' ' -f2-)"
                    else
                        continue
                    fi
                done
            fi
        fi

        debug "Inventory lines to read: $(distd "${_line_to_read_start}") => $(distd "${_line_to_read_end}")"
        for _lnum in $(${SEQ_BIN} "${_line_to_read_start}" "${_line_to_read_end}" 2>/dev/null); do
            _line="$(${SED_BIN} "${_lnum}q;d" "${_inv_internal}")" # print N-th line of file
            if [ -n "${_line}" ]; then
                echo "${_line}" | ${GREP_BIN} -E "^${_host}\ " >/dev/null 2>&1
                if [ "0" = "${?}" ]; then
                    debug "Found wanted host in inventory file: $(distd "${_host}"). Line: $(distd "${_line}")"
                    eval "$(echo "${_line}" | ${CUT_BIN} -d' ' -f2-)" && \
                        return 0
                fi
            else
                continue
            fi
        done
    }

    case ${__gcount} in
        0)
            debug "No groups. Reading whole inventory"
            _line_to_read_start=1
            _line_to_read_end="${_inv_all_lines}"

            process_inventory_values
            ;;

        *)
            # read first part of inventory file.
            for _gnum in $(${SEQ_BIN} 1 ${__gcount}); do
                _gr="$(eval "echo \$$(eval "echo __grp${_gnum}")")" # read group name
                _ln="$(eval "echo \$$(eval "echo __ln${_gnum}")")"  # read line value
                debug "Processing line: $(distd "${_ln}") of group: $(distd "${_gr}")"
                if [ "${_gr}" = "${_inv_grp}" ]; then
                    debug "Found wanted group: $(distd "${_gr}") on line: $(distd "${_ln}")"
                    _line_to_read_start=$(( ${_ln} + 1 ))
                    _next_num=$(( ${_gnum} + 1 ))
                    _next_group_ln="$(eval "echo \$$(eval "echo __ln${_next_num}")")"
                    if [ -z "${_next_group_ln}" ]; then
                        _line_to_read_end="${_inv_all_lines}"
                        debug "No next group. Setting end of file: $(distd "${_line_to_read_end}")"
                    else
                        _line_to_read_end=$(( ${_next_group_ln} - 1 ))
                    fi
                    # debug "_next_num: ${_next_num}, _next_group_ln: ${_next_group_ln}, _line_to_read_start: ${_line_to_read_start}, _line_to_read_end: ${_line_to_read_end}"

                    process_inventory_values
                fi
            done
            ;;
    esac
    unset _gnum _gr _ln _line _next_num _next_group_ln _line_to_read_end _line_to_read_start _dynval __gcount _group _inv_internal _inv_grp
}


#
# Inventory helper, with groups support
#   Will read given inventory file and print list of unique hosts sorted by name
#
# Args:
#   1. inventory-file:group-name
#
# Example, load all hosts:
#   inventory_hosts inventory
#   or
#   inventory_hosts inventory:+
#   or
#   inventory_hosts inventory:all
#
# Example, load only hosts of group "third-party":
#   inventory_hosts inventory:third-party
#
inventory_hosts () {
    _inv_int="${1}"

    # by default - read whole inventory, ignore groups
    _inv_grp="+"

    # support for specifying group like on unixes, by username:groupname as inventory
    echo "${_inv_int}" | ${GREP_BIN} -F ":" >/dev/null 2>&1
    if [ "0" = "${?}" ]; then
        _inv_grp="$(echo "${_inv_int}" | ${CUT_BIN} -d':' -f2 2>/dev/null)"
        _inv_int="$(echo "${_inv_int}" | ${CUT_BIN} -d':' -f1 2>/dev/null)"
    fi
    if [ ! -f "${_inv_int}" ]; then
        _inv_int="${SHABLE_NAME}/${_inv_int}"
        if [ ! -f "${_inv_int}" ]; then
            error "No inventory found: $(diste "${_inv_int}")"
        fi
    fi
    debug "Loading inventory: $(distd "${_inv_int}:${_inv_grp}"), for client: $(distd "${REMOTE}")"

    # all lines of inventory file
    _inv_all_lines="$(${CAT_BIN} "${_inv_int}" | ${WC_BIN} -l | ${SED_BIN} 's/ //g')"
    if [ "0" = "${_inv_all_lines}" ]; then
        warn "Empty inventory: $(distw "${_inv_int}"). Nothing to load."
        return 0
    fi

    # read groups
    __gcount=0
    for _dynval in $(${GREP_BIN} -nE "\[.*\]" "${_inv_int}" 2>/dev/null | ${SED_BIN} "s/^/__ln=/; s#:\[#;__grp=#; s#]##" 2>/dev/null); do # read groups
        eval "${_dynval}"
        __gcount=$(( ${__gcount} + 1 ))
        debug "inventory grp: $(distd "${__grp}"), start line: $(distd "${__ln}")"
        eval "__grp${__gcount}=${__grp}; __ln${__gcount}=${__ln}" # store values in dynamic variables
    done

    # if group is + - read all hosts
    if [ "+" = "${_inv_grp}" ] || [ "all" = "${_inv_grp}" ]; then
        __gcount=0
    fi

    process_inventory_hosts () {
        # when running with inventory groups,  invoke loading inventory header file first, before loading first group:
        unset _results

        if [ "1" = "${_gnum}" ]; then
            _end=$(( ${_line_to_read_start} - 2 ))
            if [ "0" != "${_end}" ]; then
                debug "Inventory first lines to read: $(distd "${_end}")"
                for _lnum in $(${SEQ_BIN} "1" "${_end}" 2>/dev/null); do
                    _line="$(${SED_BIN} "${_lnum}q;d" "${_inv_int}")" # print N-th line of file
                    if [ -n "${_line}" ]; then
                        _rl="$(echo "${_line}" | ${CUT_BIN} -d' ' -f1)"
                        if [ "${_rl}" != "_" ]; then
                            _results="${_rl}_${_results}"
                        fi
                    fi
                done
            fi
        fi

        debug "Inventory lines to read: $(distd "${_line_to_read_start}") => $(distd "${_line_to_read_end}")"
        for _lnum in $(${SEQ_BIN} "${_line_to_read_start}" "${_line_to_read_end}" 2>/dev/null); do
            _line="$(${SED_BIN} "${_lnum}q;d" "${_inv_int}")" # print N-th line of file
            if [ -n "${_line}" ]; then
                _rl="$(echo "${_line}" | ${CUT_BIN} -d' ' -f1)"
                echo "${_rl}" | ${GREP_BIN} '[_\[]' >/dev/null 2>&1
                if [ "${?}" != "0" ]; then
                    _results="${_rl}_${_results}"
                fi
            fi
        done

        # result with list of unique hosts sorted by name
        echo "${_results}" \
            | ${TR_BIN} '_' '\n' \
            | ${SED_BIN} '/^$/d' \
            | ${SORT_BIN} \
            | ${UNIQ_BIN}
    }

    case ${__gcount} in
        0)
            debug "No groups. Reading whole inventory"
            _line_to_read_start=1
            _line_to_read_end="${_inv_all_lines}"

            process_inventory_hosts
            ;;

        *)
            # read first part of inventory file.
            for _gnum in $(${SEQ_BIN} 1 ${__gcount}); do
                _gr="$(eval "echo \$$(eval "echo __grp${_gnum}")")" # read group name
                _ln="$(eval "echo \$$(eval "echo __ln${_gnum}")")"  # read line value
                debug "Processing line: $(distd "${_ln}") of group: $(distd "${_gr}")"
                if [ "${_gr}" = "${_inv_grp}" ]; then
                    debug "Found wanted group: $(distd "${_gr}") on line: $(distd "${_ln}")"
                    _line_to_read_start=$(( ${_ln} + 1 ))
                    _next_num=$(( ${_gnum} + 1 ))
                    _next_group_ln="$(eval "echo \$$(eval "echo __ln${_next_num}")")"
                    if [ -z "${_next_group_ln}" ]; then
                        _line_to_read_end="${_inv_all_lines}"
                        debug "No next group. Setting end of file: $(distd "${_line_to_read_end}")"
                    else
                        _line_to_read_end=$(( ${_next_group_ln} - 1 ))
                    fi

                    process_inventory_hosts
                fi
            done
            ;;
    esac
    unset _gnum _gr _ln _line _next_num _next_group_ln _line_to_read_end _line_to_read_start _dynval __gcount _group _inv_int _inv_grp
}


#
# Load all values for setup inventory:
#
# Params:
#   1. setup inventory - a filename
#   2. setup inventory - a group
load_whole_inventory () {
    _a_setup_inventory="${1:-inventory-setup}"
    _a_setup_group="${2:-setup}"
    for _inv in $(inventory_hosts "${_a_setup_inventory}"); do
        inventory_read "${_a_setup_inventory}:${_a_setup_group}" "${_inv}"
    done
    unset _a_setup_inventory _inv
}


#
# Simply put new fact to cached facts.
#
# Params:
#   1. a=fact
#
# Example:
#   facts_write favourite=phi yummy=bananas
#
facts_write () {
    if [ -z "${*}" ]; then
        error "No params given for: $(diste "facts_write()")"
    else
        test -d "facts/cached" || mkdir -p "facts/cached"
        for _fact in ${*}; do
            _fname="${_fact%%=*}.facts"
            _fdest="facts/cached/${_fname}"
            echo "${_fact}" > "${_fdest}"
            debug "Stored fact: $(distd "${_fact}") under: $(distd "${_fdest}")"
        done
    fi
    unset _fact _fname _fdest
}


#
# CPU architecture constraint helper.
#   Will make sure that reign task is invoked on supported platform architecture.
#
# Arg:
#   bits
#
# Arg can be "32" or "64" (at least for now)
#
only_bits () {
    case "${1}" in
        32)
            case "${SYSTEM_ARCH}" in
                amd64|x86_64)
                    error "System architecture constraint is not satisfied! Required: $(diste "32bit")"
                    ;;
            esac
            ;;

        64)
            case "${SYSTEM_ARCH}" in
                i386|i486|i686)
                    error "System architecture constraint is not satisfied! Required: $(diste "64bit")"
                    ;;
            esac
            ;;

        *)
            error "Unsupported system architecture: $(diste "${SYSTEM_ARCH}")"
            ;;
    esac
}



#
# Helper to wrap up variable definition check
#
# Args:
#   'some_value' - variable name that should not be empty
#   'Some message' - error message if variable is defined
#
# Example:
#   $ empty "${_password}" "$(diste "_password") has to be empty!"
#
is_empty () {
    if [ -n "${1}" ]; then
        error "${2}"
    fi
}


#
# Helper to wrap up variable emptiness check
#
# Args:
#   'some_value' - variable name that should not be empty
#   'Some message' - error message if variable is empty
#
# Example:
#   $ not_empty "${_host}" "$(diste "_host") has to be specified!"
#
not_empty () {
    if [ -z "${1}" ]; then
        error "${2}"
    fi
}


#
# Helper to add host config to ~/.ssh/config
#
# Args:
#   'hostname'
#   'ip'
#   'port' - optional port argument
#
# Examples:
#   add_ssh_conf_entry "myhost1" "192.168.1.10"
#   add_ssh_conf_entry "myhost2" "192.168.1.11" 5522
#
add_ssh_conf_entry () {
    if [ -n "${3}" ]; then
        printf "\nhost %b\nuser root\nhostname %b\nport %b\n" "${1}" "${2}" "${3}" >> "${HOME}/.ssh/config"
    elif [ -n "${2}" ]; then
        printf "\nhost %b\nuser root\nhostname %b\n" "${1}" "${2}" >> "${HOME}/.ssh/config"
    else
        error "add_ssh_conf_entry(): Wrong number of arguments"
    fi
}


#
# Helper that removes host config from ~/.ssh/config
#
remove_last_ssh_conf_entry () {
    for i in $(seq 1 4); do
        case "${SYSTEM_NAME}" in
            Darwin|FreeBSD)
                ${SED_BIN} -i '' -e '$d' "${HOME}/.ssh/config"
                ;;

            Linux)
                ${SED_BIN} -i '$d' "${HOME}/.ssh/config"
                ;;
        esac
    done
}


#
# Helper to setup known SSH keys to avoid ssh "yes" confirmations
#
# Args:
#   'ip'
#
add_ssh_known_host () {
    if [ -n "${1}" ]; then
        ${SSHKEYGEN_BIN} -R "${1}" >/dev/null
        ${SSHKEYSCAN_BIN} -H "${1}" >> "${HOME}/.ssh/known_hosts"
    else
        error "IP is empty? Task aborted!"
    fi
}


#
# Helper to generate timestamp in seconds since 1970
#
timestamp () {
    ${DATE_BIN} +%s 2>/dev/null
}



#
# Utility function
#   Turns space separated arguments into newline arguments (used as for-loop helper for silly shells)
#
# Args:
#   Any Space Separated Text
#
to_iter () {
    printf "%s\n" "${@}" | ${TR_BIN} ' ' '\n' 2>/dev/null
}


#
# Service management utility
#   Will await for certain conditions specified as arguments.
#
# Args:
#   process="name" - will wait until given process name appears in process list
#   socket="/path/file.sock"  - will wait until given socket file appears in specified directory
#
# Example:
#   await_startup process="mysqld" socket="/tmp/mysql.sock"
#
await_startup () {
    _awaited_arguments=${*}
    note "Awaiting startup of: $(distn "${_awaited_arguments}")"
    while true; do
        unset _process_alive _socket_exists

        for _awaited_start_of in $(to_iter "${_awaited_arguments}"); do
            _kind="$(echo "${_awaited_start_of}" | ${SED_BIN} 's/=.*//' 2>/dev/null)"
            _kind_value="$(echo "${_awaited_start_of}" | ${SED_BIN} 's/.*=//' 2>/dev/null)"
            debug "await_startup.kind: $(distd "${_kind}")"
            debug "await_startup.value: $(distd "${_kind_value}")"
            case "${_kind}" in
                process)
                    ${PS_BIN} axv | ${GREP_BIN} -v grep | ${GREP_BIN} -F "${_kind_value}" >/dev/null 2>&1
                    if [ "${?}" = "0" ]; then
                        debug "Process exists: $(distd "${_kind_value}")"
                        _process_alive="YES"
                    fi
                    ;;

                socket)
                    if [ -S "${_kind_value}" ]; then
                        debug "Socket exists: $(distd "${_kind_value}")"
                        _socket_exists="YES"
                    fi
                    ;;

                *)
                    error "Unknown kind of await: $(diste "${_kind}")"
                    ;;

            esac
        done

        if [ "YES" = "${_process_alive}" ] \
        && [ "YES" = "${_socket_exists}" ]; then
            note "Start confirmed for: $(distn "${_awaited_arguments}")"
            break
        fi

         sleep 1
    done

    unset _awaited_arguments _awaited_start_of _kind _kind_value _process_alive _socket_exists
}


#
# Service management utility
#   Will await for certain conditions specified as arguments.
#
# Args:
#   process="name" - will wait until given process name disappears from process list
#   socket="/path/file.sock"  - will wait until given socket file disappears from specified directory
#
# Example:
#   await_shutdown process="mysqld" socket="/tmp/mysql.sock"
#
await_shutdown () {
    _awaited_arguments="${*}"
    note "Awaiting shutdown of: $(distn "${_awaited_arguments}")"
    while true; do
        unset _process_alive _socket_exists

        for _awaited_shutdown_of in $(to_iter "${_awaited_arguments}"); do
            _kind="$(echo "${_awaited_shutdown_of}" | ${SED_BIN} 's/=.*//' 2>/dev/null)"
            _kind_value="$(echo "${_awaited_shutdown_of}" | ${SED_BIN} 's/.*=//' 2>/dev/null)"
            debug "await_shutdown.kind: $(distd "${_kind}")"
            debug "await_shutdown.value: $(distd "${_kind_value}")"
            case "${_kind}" in
                process)
                    ${PS_BIN} axv | ${GREP_BIN} -v grep | ${GREP_BIN} -F "${_kind_value}" >/dev/null 2>&1
                    if [ "${?}" = "0" ]; then
                        debug "Process still exists: $(distd "${_kind_value}")"
                        _process_alive="YES"
                    fi
                    ;;

                socket)
                    if [ -S "${_kind_value}" ]; then
                        debug "Socket still exists: $(distd "${_kind_value}")"
                        _socket_exists="YES"
                    fi
                    ;;

                *)
                    error "Unknown kind of await: $(diste "${_kind}")"
                    ;;

            esac
        done

        if [ -z "${_process_alive}" ] \
        && [ -z "${_socket_exists}" ]; then
            note "Shutdown confirmed for: $(distn "${_awaited_arguments}")"
            break
        fi

        sleep 1
    done

    unset _awaited_arguments _awaited_shutdown_of _kind _kind_value _process_alive _socket_exists
}

